# Прелазне секвенце

У програмском језику C често се користе прелазни карактери или прелазне
секвенце *(енгл. escape characters или escape sequences)*, испред којих увек
претходи обрнута коса црта `\`. Све прелазне секвенце наведене су у
табели прелазних секвенци у [прилогу](../prilozi/prelazne_sekvence.md), а у
овој лекцији учићеш о онима које ћеш најчешће и користити.

## Обрнута коса црта, наводник, апостроф и упитник

У лекцији о знаковном типу података напоменуто је да се карактери задају између
два апострофа, осим карактера обрнута коса црта, наводник, апостроф и упитник.
Навођење ових карактера решено је управо прелазним секвенцама тако што се
испред карактера наводи обрнута коса црта.

Напиши програм у програмској језику C у којем су иницијализоване четири
знаковне променљиве `a`, `b`, `c` и `d` са карактерима обрнута коса црта,
наводник, апостроф и упитник. Ако не користиш прелазне секвенце, компајлер ће
пронаћи много грешака током процеса превођења:

```text
#include <stdio.h>

int main(void)
{
    char a = '\', b = '"', c = ''', d = '?'; // neispravno
    return 0;
}
```

Да би исправио грешке у програму потребно је да ставиш обрнуту косу црту пре
навођења обрнуте косе црте, наводника, апострофа и упитника чиме си креирао
прелазне секвенце.

```c
#include <stdio.h>

int main(void)
{
    char a = '\\', b = '\"', c = '\'', d = '\?'; // ispravno
    return 0;
}
```

## Нови ред

Прелазна секвенца `\n` користи се за прелазак курсора у нови ред.

Напиши програм у програмској језику C који на стандардни излаз исписује следећи
текст:

```text
Fondacija Petlja
Koste Glavinica 2, Beograd
loop@petlja.org
```

Ако програм напишеш овако:

```{literalinclude} code/prelazna0.c
:language: c
```

на стандардном излазу исписаће се текст записан у једном реду, јер у програму
ниси навео прелазну секвенцу за прелазак у нови ред.

```text
Fondacija PetljaKoste Glavinica 2, Beogradloop@petlja.org
```

Када желиш да курсор пређе у нови ред, потребно је да наведеш прелазну секвенцу
`\n`:

```{literalinclude} code/prelazna1.c
:language: c
```

па ће се на стандардном излазу коректно исписати тражени текст:

```text
Fondacija Petlja
Koste Glavinica 2, Beograd
loop@petlja.org
```

То такође значи да нема потребе да функцију `printf()` позиваш три пута и да би
се исти текст на стандардном излазу исписао следећим програмом:

```{literalinclude} code/prelazna2.c
:language: c
```

## Табулатор

Као и у текст процесорима и текст едиторима, табулатор можеш користити када
желиш да прикажеш податке на стандардном излазу тачно један испод другог, на
пример табеларно. У програмском језику C, један притисак на тастер `TAB`
симулира прелазна секвенца `\t`.

Напиши програм у програмској језику C који на стандардни излаз исписује следећe
податке:

```text
Ime     Prezime Razred
Ana     Anic    II
Nikola  Nikolic III
Marko   Maric   IV
Milica  Milicic I
```

Овај задатак можеш решити пишући тражене податке један испод другог у
`printf()` функцијама:

```{literalinclude} code/prelazna3.c
:language: c
```

Међутим, у каснијем раду, подаци ће бити променљиве, па нећеш унапред знати
колико ће карактера који податак заузимати. Тада је решење коришћење прелазне
секвенце `\t`, односно табулатора. Према томе, претходни програм можеш написати
користећи табулатор, без потребе да мануелно распоређујеш податке један испод
другог.

```{literalinclude} code/prelazna4.c
:language: c
```

Са осталим прелазним секвенцама из табеле дате у
[прилогу](../prilozi/prelazne_sekvence.md)
упознаваћеш се током рада, када се за то укаже потреба.
