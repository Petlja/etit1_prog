# Програмски језици

Језик представља скуп правила за комуникацију. Помоћу језика представљају се и
преносе информације. **Природни језик** се користи за комуникацију између људи
у говорној или писаној форми.

```{image} images/zdravo.png
:width: 50%
:align: center
:alt: Реч Здраво на природним језицима
```

**Програмски језик** служи за комуникацију између програмера и рачунара.
Програмер уноси текст (програмски кôд) у рачунар на програмском језику, са
циљем да рачунар изврши инструкције задате у том тексту.

```{image} images/programmer.png
:width: 50%
:align: center
:alt: Програмер пише програмски кôд
```

**Програмски језик** се може дефинисати као скуп речи и правила за писање
рачунарских програма који описују послове које треба да обави рачунар.

Књижевна или слична ауторска дела написана у неком од природних језика обично
се објављују у штампаном или електронском формату. Нека од њих се преводе и на
друге природне језике, али увек остају непромењена, односно верна оригиналу.

С друге стране, оригинална верзија програмског кода у одређеном програмском
језику, након објављивања, засигурно ће се у будућности мењати у циљу
исправљања грешака (багова) или унапређивања функционалности. У тренутку писања
програма, програмеру су сигурно јасне инструкције у програму које је написао.
Међутим, ако програм није написан јасно и читљиво, чланови тима са којима
програмер ради имаће потешкоћа да га разумеју. Чак се ни сâм аутор програмер,
након одређеног времена и рада на другим пројектима, неће снаћи са сопственим
нејасним и нечитким програмским кодом. Зато је важно да програме пишеш јасно и
читљиво.

## Поделе програмских језика

До данас је креирано више хиљада програмских језика, али нису сви једнако важни
и заступљени.

```{image} images/programminglanguages.png
:width: 70%
:align: center
:alt: Програмски језици
```

Поред важности и заступљености, програмски језици могу се поделити на много
начина и у много категорија у зависности од критеријума на основу којих се врши
подела.

### Подела према степену блискости са архитектуром процесора

Из предмета Рачунарство и информатика научио си да је централна процесорска
јединица (енгл. *Central Processing Unit - CPU*), скраћено процесор,
електронска компонента која извршава инструкције програма и изводи операције
над подацима. Према типу инструкција које извршавају, процесори се могу грубо
поделити на процесоре имплементиране у **RISC**
(енгл. *Reduced Instruction Set Computer*) технологији и процесоре
имплементиране у **CISC** технологији
(енгл. *Complex Instruction Set Computer*). На пример, у свом мобилном телефону
или таблету вероватно имаш ARM процесор у RISC технологији, док у свом лаптоп
или десктоп рачунару вероватно имаш x86/x64 процесор у CISC технологији.

Тако се, према степену блискости са архитектуром процесора, програмски језици
деле на језике ниског нивоа (машински и асемблерски) и језике високог нивоа (C,
C++, C#, Java...). Језици ниског нивоа подразумевају блискост са одређеном
процесорском архитектуром, док се језици високог нивоа, захваљујући
компајлерима, могу користити на рачунарима са различитим архитектурама
процесора.

То значи да ће асемблерски програм написан за процесор у CISC технологији бити
неупотребљив за процесор у RISC технологији и обрнуто. Врло је вероватно и да
ће асемблерски програм написан за процесор у одређеној технологији одређене
генерације бити неупотребљив за процесор исте технологије много новије или
много старије генерације. С друге стране, програм написан у програмском језику
високог нивоа може да буде функционалан за процесор било које технологије и
било које генерације.

Машински програм извршава се директно у процесору, где процесор тумачи машинске
кодове, и овакви програми су потпуно неразумљиви човеку. Асемблерски програми
састоје се из наредби којима се више или мање придружују машинске наредбе.
Наредбе асемблерских програма пишу се у виду мнемоничких скраћеница речи на
енглеском језику. Наредбе програмских језика високог нивоа су блиске енглеском
језику и структуриране су тако да одговарају начину размишљања програмера.

Почнимо са језицима високог нивоа и једноставним примером који у конзоли треба
да испише текст `Hello, World!`. У програмском језику **C** тај програм
изгледао би овако:

```{literalinclude} code/hello.c
:language: c
```

Чак и ако не знаш ништа о програмирању и програмским језицима, а знаш енглески
језик, можеш да претпоставиш да се на почетку програма нешто укључује
*(include)*, па нешто штампа *(print)* и на крају нешто враћа *(return)*. У
програмском језику **C++** програм са истом функционалношћу изгледао би овако:

```{literalinclude} code/hello.cpp
:language: cpp
```

односно, у програмском језику **C#** овако:

```{literalinclude} code/hello.cs
:language: cs
```

Најједноставнија би била варијанта у програмском језику **Python** који си учио
у основној школи:

```{literalinclude} code/hello.py
:language: py
```

С друге стране, исти програм у знатно комплекснијем асемблерском језику за
испис текста `Hello, World!` у конзоли изгледа овако:

```{literalinclude} code/hello.asm
:language: nasm
```

Овај програм је функционалан само ако се користи Microsoft асемблер на
64-битној верзији оперативног система Windows на рачунарима са Intel или AMD
64-битним процесорима у CISC технологији. Уколико се користи неки други
асемблер на другом оперативном систему, или се користи рачунар са другом
архитектуром процесора, програм неће бити функционалан. Исти програм у
програмском језику C је функционалан са било којим C компајлером на било ком
оперативном систему са било каквом хардверском архитектуром.

Машински језик је неразумљив чак и искусним програмерима. Значење делова
машинског кода обично могу да "препознају" програмери који су се баш за то
специјализовали. Део машинског програма у хексадекадном запису за испис текста
`Hello, World!` у конзоли изгледа овако:

```{literalinclude} code/hello.hex
:language: hexdump
```

Цео програм био би предугачак за приказ на овом месту.

У одређеној литератури прочитаћеш да је ово подела програмских језика према
генерацијама. Тако, машински језик се сматра програмским језиком прве
генерације, асемблерски језик програмским језиком друге генерације, а
програмски језици високог нивоа (Fortran, Pascal, C и др.) програмским
језицима треће генерације. Генерацијска класификација језика на високом нивоу,
од треће генерације на даље, никада није била у потпуности прецизирана, а
касније је и напуштена.

### Подела на компајлере и интерпретере

Програмски језици могу се поделити на компајлерске и интерпретерске. Код
компајлерских језика, помоћу компајлера врши се превођење изворног у извршни
програм, који се касније може независно извршавати. Код интерпретерских језика,
помоћу интерпретера врши се превођење сваке линије програма пре њеног извршења,
а програм се не може извршавати независно без постојања интерпретера.

Програмски језици засновани на компајлерима су C, C++, C#, Java и др.
Програмски језици засновани на интерпретерима су Python, Ruby, Perl и др.

### Подела према начину програмирања

Према начину програмирања, програмски језици могу се сврстати у основне
програмске парадигме. Програмска парадигма може да означава: програмски стил,
начин/стил програмирања и класификацију међусобно сличних програмских језика.

Програмске парадигме изучавају се како би се боље упознала својства програмских
језика који им припадају. Програмске парадигме могу се поделити на:

- императивне парадигме и
- декларативне парадигме.

**Императивне парадигме** подразумевају програмске језике у којима се користе
искази/наредбе који мењају стање програма. Основне императивне парадигме су:

- процедуралне парадигме (програмски језици C, Pascal, Fortran) и
- објектно-оријентисане парадигме (програмски језици C++, C^#, Java).

**Декларативне парадигме** подразумевају програмске језике у којима се више
изражава логика него искази/наредбе. Основне декларативне парадигме су:

- функционалне парадигме (програмски језици Haskell, F#) и
- логичке парадигме (програмски језици Prolog и његови деривати).

У савременим програмским језицима увек је помешано више програмских парадигми
(енгл. *multi-paradigm*). На пример, програмски језик C++ јесте
објектно-оријентисан, али се може сврстати и у групу процедуралних и у групу
функционалних језика. Данас постоји око сто категорија и поткатегорија
програмских парадигми.

## Шта нису програмски језици

Језици за описивање/структурирање текста нису програмски језици јер се помоћу
њих не пишу програми које треба да изврши рачунар. Примери оваквих језика су:
HTML, CSS, XML, SGML, JSON и др.
