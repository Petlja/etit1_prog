# Тернарни условни оператор

Поред `if-else` наредби, у програмском језику C гранање можеш реализовати и
помоћу тернарног условног оператора `?:`. Општи облик наредбе са тернарним
условним оператором изгледа овако:

```c
izraz_1 ? izraz_2 : izraz_3;
```

Овај оператор назива се тернарним јер захтева три операнда `izraz_1`, `izraz_2`
и `izraz_3`. Наредба се извршава тако што се прво израчуна вредност `izraz_1`,
па ако је његова вредност различита од нуле, односно тачна, извршава се
`izraz_2`, а ако је његова вредност једнака нули, односно нетачна, извршава
се `izraz_3`.

Напиши алгоритам и програм у програмском језику C који на стандардни излаз
исписује већи број од два унета цела броја са стандардног улаза.

Алгоритамско решење овог задатка представљено дијаграмом тока може да изгледа
овако:

```{image} images/ternarni1.png
:width: 50%
:align: center
:alt: Тернарни условни оператор
```

Програм у програмском језику C, са наредбом `if-else`, може да изгледа овако:

```{literalinclude} code/ternarni0.c
:language: c
```

Краће, без увођења треће променљиве `max`, алгоритамско решење овог задатка
представљено дијаграмом тока може да изгледа овако:

```{image} images/ternarni2.png
:width: 50%
:align: center
:alt: Тернарни условни оператор
```

Програм у програмском језику C може да изгледа овако:

```{literalinclude} code/ternarni1.c
:language: c
```

Аналогно претходним решењима, решење са тернарним условним оператором било би...

```{literalinclude} code/ternarni2.c
:language: c
```

...или без променљиве `max`:

```{literalinclude} code/ternarni3.c
:language: c
```

Тернарни условни оператор `?:` није замена за наредбу `if-else`. Само име
"оператор" говори ти да његово извршавање резултира неком вредношћу. Због тога
решење овог задатка можеш записати овако...

```{literalinclude} code/ternarni4.c
:language: c
```

...или још краће, без променљиве `max`, овако:

```{literalinclude} code/ternarni5.c
:language: c
```

Последње решење је уједно и најкраће решење, а притом није ништа мање прегледно
од претходних.

Тернарне условне операторе можеш **угнежђавати**.

Напиши алгоритам и програм у програмском језику C који на стандардни излаз
исписује да ли је унети број са стандардног улаза мањи, једнак или већи од
нуле.

Алгоритамско решење овог задатка представљено дијаграмом тока може да изгледа
овако:

```{image} images/ternarni6.png
:width: 70%
:align: center
:alt: Тернарни условни оператор
```

Програм у програмском језику C може да изгледа овако:

```{literalinclude} code/ternarni6.c
:language: c
```

Међутим, наредбу `if-else` не можеш у свакој ситуацији да замениш тернарним
условним оператором. Највећи недостатак коришћења тернарног условног оператора
у односу на коришћење `if-else` наредбе је тај што операнди `izraz_2` и `izraz_3`
тернарног условног оператора могу бити једна наредба, али не и блок наредби.
